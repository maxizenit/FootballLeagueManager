package ru.maxizenit.footballleaguemanager.gui.dialog.entitydialog;

import com.github.lgooddatepicker.components.DatePicker;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Dimension;
import java.awt.Insets;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.springframework.data.convert.Jsr310Converters;
import org.springframework.data.convert.Jsr310Converters.DateToLocalDateConverter;
import org.springframework.data.convert.Jsr310Converters.LocalDateToDateConverter;
import org.springframework.util.StringUtils;
import ru.maxizenit.footballleaguemanager.entity.Player;
import ru.maxizenit.footballleaguemanager.entity.Position;
import ru.maxizenit.footballleaguemanager.entity.Team;
import ru.maxizenit.footballleaguemanager.exception.InvalidFieldException;

import java.util.ArrayList;
import java.util.List;

/**
 * Диалог для игроков.
 */
public class PlayerDialog extends EntityDialog<Player> {

  private JPanel mainPanel;

  private JButton buttonOK;

  private JButton buttonCancel;

  /**
   * Поле команды.
   */
  private JComboBox<Team> teamField;

  private JButton clearTeamFieldButton;

  /**
   * Поле номера.
   */
  private JTextField numberField;

  /**
   * Поле позиции.
   */
  private JComboBox<Position> positionField;

  /**
   * Поле даты рождения.
   */
  private DatePicker birthDateField;

  /**
   * Поле фамилии.
   */
  private JTextField lastNameField;

  /**
   * Поле имени.
   */
  private JTextField firstNameField;

  /**
   * Поле краткого имени.
   */
  private JTextField shortNameField;


  public PlayerDialog(JFrame parent, SaveFunction<Player> saveFunction,
      RefreshGUIFunction refreshGUIFunction, Player entity, List<Team> teams,
      List<Position> positions) {
    super(parent, saveFunction, refreshGUIFunction, entity);
    initCombos(teams, positions);
    init(mainPanel, buttonOK, buttonCancel);
    pack();
    setVisible(true);
  }

  /**
   * Инициализирует комбинированные списки для полей команды и позиции.
   *
   * @param teams     список команд
   * @param positions список позиций
   */
  private void initCombos(List<Team> teams, List<Position> positions) {
    DefaultComboBoxModel<Team> teamModel = new DefaultComboBoxModel<>();
    teamModel.addAll(teams);
    teamField.setModel(teamModel);

    DefaultComboBoxModel<Position> positionModel = new DefaultComboBoxModel<>();
    positionModel.addAll(positions);
    positionField.setModel(positionModel);
  }

  @Override
  protected void fillFields(Player entity) {
    teamField.setSelectedItem(entity.getTeam());
    numberField.setText(entity.getNumber() != null ? entity.getNumber().toString() : null);
    positionField.setSelectedItem(entity.getPosition());
    birthDateField.setDate(
        DateToLocalDateConverter.INSTANCE.convert(entity.getBirthdate()));
    lastNameField.setText(entity.getLastName());
    firstNameField.setText(entity.getFirstName());
    shortNameField.setText(entity.getShortName());
  }

  @Override
  protected boolean isFieldsValid() throws InvalidFieldException {
    List<String> invalidFields = new ArrayList<>();

    if (StringUtils.hasText(numberField.getText())) {
      try {
        Integer.parseInt(numberField.getText());
      } catch (NumberFormatException e) {
        invalidFields.add("номер");
      }
    }

    if (birthDateField.getDate() == null) {
      invalidFields.add("дата рождения");
    }

    if (!invalidFields.isEmpty()) {
      throw new InvalidFieldException(invalidFields);
    }

    return true;
  }

  @Override
  protected Player createNewEntity() {
    return new Player();
  }

  @Override
  protected void fillEntityFromFields(Player entity) {
    entity.setTeam((Team) teamField.getSelectedItem());
    entity.setNumber(
        StringUtils.hasText(numberField.getText()) ? Integer.parseInt(numberField.getText())
            : null);
    entity.setPosition((Position) positionField.getSelectedItem());
    entity.setBirthdate(
        LocalDateToDateConverter.INSTANCE.convert(birthDateField.getDate()));
    entity.setLastName(lastNameField.getText());
    entity.setFirstName(firstNameField.getText());
    entity.setShortName(shortNameField.getText());
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel1, new GridConstraints(7, 0, 1, 3, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonOK = new JButton();
    buttonOK.setText("ОК");
    panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonCancel = new JButton();
    buttonCancel.setText("Отменить");
    panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Команда");
    mainPanel.add(label1,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label2 = new JLabel();
    label2.setText("Позиция");
    mainPanel.add(label2,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label3 = new JLabel();
    label3.setText("Фамилия");
    mainPanel.add(label3,
        new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label4 = new JLabel();
    label4.setText("Имя");
    mainPanel.add(label4,
        new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label5 = new JLabel();
    label5.setText("Краткое имя");
    mainPanel.add(label5,
        new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label6 = new JLabel();
    label6.setText("Номер");
    mainPanel.add(label6,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    final JLabel label7 = new JLabel();
    label7.setText("Дата рождения");
    mainPanel.add(label7,
        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    clearTeamFieldButton = new JButton();
    clearTeamFieldButton.setText("Очистить");
    mainPanel.add(clearTeamFieldButton,
        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    numberField = new JTextField();
    mainPanel.add(numberField, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    positionField = new JComboBox();
    mainPanel.add(positionField, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    birthDateField = new DatePicker();
    mainPanel.add(birthDateField, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
        null, 0, false));
    teamField = new JComboBox();
    mainPanel.add(teamField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    lastNameField = new JTextField();
    mainPanel.add(lastNameField, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    firstNameField = new JTextField();
    mainPanel.add(firstNameField, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    shortNameField = new JTextField();
    mainPanel.add(shortNameField, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }

}
